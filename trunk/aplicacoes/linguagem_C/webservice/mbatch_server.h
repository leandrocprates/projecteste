/* mbatch_server.h
   Generated by wsdl2h 2.8.2 from http://localhost:8080/WebServiceBatch/BatchFile?wsdl and typemap.dat
   2011-06-20 21:40:08 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on mbatch_server.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt cw

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://service.okto.com.br/                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://service.okto.com.br/"
ns2 = ""
ns2 = ""
ns3 = "http://jaxb.dev.java.net/array"

*/

#define SOAP_NAMESPACE_OF_ns2	""
//gsoap ns2   schema namespace:	
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns2	""
//gsoap ns2   schema namespace:	
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://service.okto.com.br/"
//gsoap ns1   schema namespace:	http://service.okto.com.br/
//gsoap ns1   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"http://jaxb.dev.java.net/array"
//gsoap ns3   schema namespace:	http://jaxb.dev.java.net/array
//gsoap ns3   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://service.okto.com.br/                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://jaxb.dev.java.net/array                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://service.okto.com.br/                                              *
 *                                                                            *
\******************************************************************************/


/// "http://service.okto.com.br/":totalRegister is a complexType.
struct ns1__totalRegister
{
/// Element client of type xs:string.
    char*                                client                         0;	///< Optional element.
/// Element user of type xs:string.
    char*                                user                           0;	///< Optional element.
/// Element password of type xs:string.
    char*                                password                       0;	///< Optional element.
/// Element idBatch of type xs:int.
    int                                  idBatch                        1;	///< Required element.
};

/// "http://service.okto.com.br/":totalRegisterResponse is a complexType.
struct ns1__totalRegisterResponse
{
/// Element return of type xs:int.
    int                                  return_                        1;	///< Required element.
};

/// "http://service.okto.com.br/":BatchException is a complexType.
struct ns1__BatchException
{
/// Element message of type xs:string.
    char*                                message                        0;	///< Optional element.
};

/// "http://service.okto.com.br/":checkStatusMessage is a complexType.
struct ns1__checkStatusMessage
{
/// Element client of type xs:string.
    char*                                client                         0;	///< Optional element.
/// Element user of type xs:string.
    char*                                user                           0;	///< Optional element.
/// Element password of type xs:string.
    char*                                password                       0;	///< Optional element.
/// Element idMessage of type xs:int.
    int                                  idMessage                      1;	///< Required element.
};

/// "http://service.okto.com.br/":checkStatusMessageResponse is a complexType.
struct ns1__checkStatusMessageResponse
{
/// Element return of type xs:string.
    char*                                return_                        0;	///< Optional element.
};

/// "http://service.okto.com.br/":sentMessage is a complexType.
struct ns1__sentMessage
{
/// Element client of type xs:string.
    char*                                client                         0;	///< Optional element.
/// Element user of type xs:string.
    char*                                user                           0;	///< Optional element.
/// Element password of type xs:string.
    char*                                password                       0;	///< Optional element.
/// Element idBatch of type xs:int.
    int                                  idBatch                        1;	///< Required element.
};

/// "http://service.okto.com.br/":sentMessageResponse is a complexType.
struct ns1__sentMessageResponse
{
/// Element return of type xs:int.
    int                                  return_                        1;	///< Required element.
};

/// "http://service.okto.com.br/":validRegister is a complexType.
struct ns1__validRegister
{
/// Element client of type xs:string.
    char*                                client                         0;	///< Optional element.
/// Element user of type xs:string.
    char*                                user                           0;	///< Optional element.
/// Element password of type xs:string.
    char*                                password                       0;	///< Optional element.
/// Element idBatch of type xs:int.
    int                                  idBatch                        1;	///< Required element.
};

/// "http://service.okto.com.br/":validRegisterResponse is a complexType.
struct ns1__validRegisterResponse
{
/// Element return of type xs:int.
    int                                  return_                        1;	///< Required element.
};

/// "http://service.okto.com.br/":checkStatus is a complexType.
struct ns1__checkStatus
{
/// Element client of type xs:string.
    char*                                client                         0;	///< Optional element.
/// Element user of type xs:string.
    char*                                user                           0;	///< Optional element.
/// Element password of type xs:string.
    char*                                password                       0;	///< Optional element.
/// Element idBatch of type xs:int.
    int                                  idBatch                        1;	///< Required element.
};

/// "http://service.okto.com.br/":checkStatusResponse is a complexType.
struct ns1__checkStatusResponse
{
/// Element return of type xs:string.
    char*                                return_                        0;	///< Optional element.
};

/// "http://service.okto.com.br/":send is a complexType.
struct ns1__send
{
/// Element client of type xs:string.
    char*                                client                         0;	///< Optional element.
/// Element user of type xs:string.
    char*                                user                           0;	///< Optional element.
/// Element password of type xs:string.
    char*                                password                       0;	///< Optional element.
/// Element startTime of type xs:string.
    char*                                startTime                      0;	///< Optional element.
/// Element endTime of type xs:string.
    char*                                endTime                        0;	///< Optional element.
/// Size of array of struct ns3__stringArray* is 0..unbounded
   $int                                  __sizefile                     0;
/// Array struct ns3__stringArray* of length 0..unbounded
    struct ns3__stringArray*             file                           0;	///< Nullable pointer.
/// Element idMessage of type xs:int.
    int                                  idMessage                      1;	///< Required element.
/// Element mail of type xs:string.
    char*                                mail                           0;	///< Optional element.
};

/// "http://service.okto.com.br/":sendResponse is a complexType.
struct ns1__sendResponse
{
/// Element return of type xs:int.
    int                                  return_                        1;	///< Required element.
};

/// "http://service.okto.com.br/":invalidRegister is a complexType.
struct ns1__invalidRegister
{
/// Element client of type xs:string.
    char*                                client                         0;	///< Optional element.
/// Element user of type xs:string.
    char*                                user                           0;	///< Optional element.
/// Element password of type xs:string.
    char*                                password                       0;	///< Optional element.
/// Element idBatch of type xs:int.
    int                                  idBatch                        1;	///< Required element.
};

/// "http://service.okto.com.br/":invalidRegisterResponse is a complexType.
struct ns1__invalidRegisterResponse
{
/// Element return of type xs:int.
    int                                  return_                        1;	///< Required element.
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://jaxb.dev.java.net/array                                           *
 *                                                                            *
\******************************************************************************/


/// "http://jaxb.dev.java.net/array":stringArray is a complexType.
struct ns3__stringArray
{
/// Size of array of char** is 0..unbounded
   $int                                  __sizeitem                     0;
/// Array char** of length 0..unbounded
    char**                               item                           0;	///< Nullable pointer.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://service.okto.com.br/                                              *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://service.okto.com.br/":BatchException of type "http://service.okto.com.br/":BatchException.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.okto.com.br/":checkStatus of type "http://service.okto.com.br/":checkStatus.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.okto.com.br/":checkStatusMessage of type "http://service.okto.com.br/":checkStatusMessage.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.okto.com.br/":checkStatusMessageResponse of type "http://service.okto.com.br/":checkStatusMessageResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.okto.com.br/":checkStatusResponse of type "http://service.okto.com.br/":checkStatusResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.okto.com.br/":invalidRegister of type "http://service.okto.com.br/":invalidRegister.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.okto.com.br/":invalidRegisterResponse of type "http://service.okto.com.br/":invalidRegisterResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.okto.com.br/":send of type "http://service.okto.com.br/":send.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.okto.com.br/":sendResponse of type "http://service.okto.com.br/":sendResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.okto.com.br/":sentMessage of type "http://service.okto.com.br/":sentMessage.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.okto.com.br/":sentMessageResponse of type "http://service.okto.com.br/":sentMessageResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.okto.com.br/":totalRegister of type "http://service.okto.com.br/":totalRegister.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.okto.com.br/":totalRegisterResponse of type "http://service.okto.com.br/":totalRegisterResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.okto.com.br/":validRegister of type "http://service.okto.com.br/":validRegister.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.okto.com.br/":validRegisterResponse of type "http://service.okto.com.br/":validRegisterResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://service.okto.com.br/                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://jaxb.dev.java.net/array                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://jaxb.dev.java.net/array                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	BatchFilePortBinding 
//gsoap ns1  service type:	BatchFile 
//gsoap ns1  service port:	http://localhost:8080/WebServiceBatch/BatchFile 
//gsoap ns1  service namespace:	http://service.okto.com.br/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage BatchFileService Definitions

@section BatchFileService_bindings Service Bindings

  - @ref BatchFilePortBinding

@section BatchFileService_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page BatchFilePortBinding Binding "BatchFilePortBinding"

@section BatchFilePortBinding_operations Operations of Binding  "BatchFilePortBinding"

  - @ref __ns1__send

  - @ref __ns1__checkStatus

  - @ref __ns1__checkStatusMessage

  - @ref __ns1__validRegister

  - @ref __ns1__invalidRegister

  - @ref __ns1__totalRegister

  - @ref __ns1__sentMessage

@section BatchFilePortBinding_ports Endpoints of Binding  "BatchFilePortBinding"

  - http://localhost:8080/WebServiceBatch/BatchFile

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use option -j to omit.

*/
struct SOAP_ENV__Detail
{
// xsd:anyAttribute omitted: to parse attribute content of the Detail element into DOM anyAttribute, use wsdl2h option -d.
    _XML                                 __any                         ;	///< Catch any element content in XML string.
    struct ns1__BatchException*          ns1__BatchException           ;
///< SOAP Fault element ""http://service.okto.com.br/":BatchException" part "fault"
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object X or NULL
};

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   BatchFilePortBinding                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__send                                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__send" of service binding "BatchFilePortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action="http://service.okto.com.br/BatchFile/sendRequest"

  - Addressing response action="http://service.okto.com.br/BatchFile/sendResponse"

  - SOAP Fault: "http://service.okto.com.br/":BatchException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__send(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__send*                   ns1__send,
    // response parameters:
    struct ns1__sendResponse*           ns1__sendResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__send(
    struct soap *soap,
    // request parameters:
    struct ns1__send*                   ns1__send,
    // response parameters:
    struct ns1__sendResponse*           ns1__sendResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	send document
//gsoap ns1  service method-encoding:	send literal
//gsoap ns1  service method-action:	send ""
//gsoap ns1  service method-fault:	send ns1__BatchException
int __ns1__send(
    struct ns1__send*                   ns1__send,	///< Request parameter
    struct ns1__sendResponse*           ns1__sendResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__checkStatus                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__checkStatus" of service binding "BatchFilePortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action="http://service.okto.com.br/BatchFile/checkStatusRequest"

  - Addressing response action="http://service.okto.com.br/BatchFile/checkStatusResponse"

  - SOAP Fault: "http://service.okto.com.br/":BatchException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__checkStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__checkStatus*            ns1__checkStatus,
    // response parameters:
    struct ns1__checkStatusResponse*    ns1__checkStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__checkStatus(
    struct soap *soap,
    // request parameters:
    struct ns1__checkStatus*            ns1__checkStatus,
    // response parameters:
    struct ns1__checkStatusResponse*    ns1__checkStatusResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	checkStatus document
//gsoap ns1  service method-encoding:	checkStatus literal
//gsoap ns1  service method-action:	checkStatus ""
//gsoap ns1  service method-fault:	checkStatus ns1__BatchException
int __ns1__checkStatus(
    struct ns1__checkStatus*            ns1__checkStatus,	///< Request parameter
    struct ns1__checkStatusResponse*    ns1__checkStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__checkStatusMessage                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__checkStatusMessage" of service binding "BatchFilePortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action="http://service.okto.com.br/BatchFile/checkStatusMessageRequest"

  - Addressing response action="http://service.okto.com.br/BatchFile/checkStatusMessageResponse"

  - SOAP Fault: "http://service.okto.com.br/":BatchException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__checkStatusMessage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__checkStatusMessage*     ns1__checkStatusMessage,
    // response parameters:
    struct ns1__checkStatusMessageResponse* ns1__checkStatusMessageResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__checkStatusMessage(
    struct soap *soap,
    // request parameters:
    struct ns1__checkStatusMessage*     ns1__checkStatusMessage,
    // response parameters:
    struct ns1__checkStatusMessageResponse* ns1__checkStatusMessageResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	checkStatusMessage document
//gsoap ns1  service method-encoding:	checkStatusMessage literal
//gsoap ns1  service method-action:	checkStatusMessage ""
//gsoap ns1  service method-fault:	checkStatusMessage ns1__BatchException
int __ns1__checkStatusMessage(
    struct ns1__checkStatusMessage*     ns1__checkStatusMessage,	///< Request parameter
    struct ns1__checkStatusMessageResponse* ns1__checkStatusMessageResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__validRegister                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__validRegister" of service binding "BatchFilePortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action="http://service.okto.com.br/BatchFile/validRegisterRequest"

  - Addressing response action="http://service.okto.com.br/BatchFile/validRegisterResponse"

  - SOAP Fault: "http://service.okto.com.br/":BatchException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__validRegister(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__validRegister*          ns1__validRegister,
    // response parameters:
    struct ns1__validRegisterResponse*  ns1__validRegisterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__validRegister(
    struct soap *soap,
    // request parameters:
    struct ns1__validRegister*          ns1__validRegister,
    // response parameters:
    struct ns1__validRegisterResponse*  ns1__validRegisterResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	validRegister document
//gsoap ns1  service method-encoding:	validRegister literal
//gsoap ns1  service method-action:	validRegister ""
//gsoap ns1  service method-fault:	validRegister ns1__BatchException
int __ns1__validRegister(
    struct ns1__validRegister*          ns1__validRegister,	///< Request parameter
    struct ns1__validRegisterResponse*  ns1__validRegisterResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__invalidRegister                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__invalidRegister" of service binding "BatchFilePortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action="http://service.okto.com.br/BatchFile/invalidRegisterRequest"

  - Addressing response action="http://service.okto.com.br/BatchFile/invalidRegisterResponse"

  - SOAP Fault: "http://service.okto.com.br/":BatchException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__invalidRegister(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__invalidRegister*        ns1__invalidRegister,
    // response parameters:
    struct ns1__invalidRegisterResponse* ns1__invalidRegisterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__invalidRegister(
    struct soap *soap,
    // request parameters:
    struct ns1__invalidRegister*        ns1__invalidRegister,
    // response parameters:
    struct ns1__invalidRegisterResponse* ns1__invalidRegisterResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	invalidRegister document
//gsoap ns1  service method-encoding:	invalidRegister literal
//gsoap ns1  service method-action:	invalidRegister ""
//gsoap ns1  service method-fault:	invalidRegister ns1__BatchException
int __ns1__invalidRegister(
    struct ns1__invalidRegister*        ns1__invalidRegister,	///< Request parameter
    struct ns1__invalidRegisterResponse* ns1__invalidRegisterResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__totalRegister                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__totalRegister" of service binding "BatchFilePortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action="http://service.okto.com.br/BatchFile/totalRegisterRequest"

  - Addressing response action="http://service.okto.com.br/BatchFile/totalRegisterResponse"

  - SOAP Fault: "http://service.okto.com.br/":BatchException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__totalRegister(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__totalRegister*          ns1__totalRegister,
    // response parameters:
    struct ns1__totalRegisterResponse*  ns1__totalRegisterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__totalRegister(
    struct soap *soap,
    // request parameters:
    struct ns1__totalRegister*          ns1__totalRegister,
    // response parameters:
    struct ns1__totalRegisterResponse*  ns1__totalRegisterResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	totalRegister document
//gsoap ns1  service method-encoding:	totalRegister literal
//gsoap ns1  service method-action:	totalRegister ""
//gsoap ns1  service method-fault:	totalRegister ns1__BatchException
int __ns1__totalRegister(
    struct ns1__totalRegister*          ns1__totalRegister,	///< Request parameter
    struct ns1__totalRegisterResponse*  ns1__totalRegisterResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__sentMessage                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__sentMessage" of service binding "BatchFilePortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action="http://service.okto.com.br/BatchFile/sentMessageRequest"

  - Addressing response action="http://service.okto.com.br/BatchFile/sentMessageResponse"

  - SOAP Fault: "http://service.okto.com.br/":BatchException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__sentMessage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__sentMessage*            ns1__sentMessage,
    // response parameters:
    struct ns1__sentMessageResponse*    ns1__sentMessageResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__sentMessage(
    struct soap *soap,
    // request parameters:
    struct ns1__sentMessage*            ns1__sentMessage,
    // response parameters:
    struct ns1__sentMessageResponse*    ns1__sentMessageResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	sentMessage document
//gsoap ns1  service method-encoding:	sentMessage literal
//gsoap ns1  service method-action:	sentMessage ""
//gsoap ns1  service method-fault:	sentMessage ns1__BatchException
int __ns1__sentMessage(
    struct ns1__sentMessage*            ns1__sentMessage,	///< Request parameter
    struct ns1__sentMessageResponse*    ns1__sentMessageResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns2 Top-level root elements of schema ""

@section ns2 Top-level root elements of schema ""

@section ns1 Top-level root elements of schema "http://service.okto.com.br/"

  - <ns1:BatchException> (use wsdl2h option -g to auto-generate)

  - <ns1:checkStatus> (use wsdl2h option -g to auto-generate)

  - <ns1:checkStatusMessage> (use wsdl2h option -g to auto-generate)

  - <ns1:checkStatusMessageResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:checkStatusResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:invalidRegister> (use wsdl2h option -g to auto-generate)

  - <ns1:invalidRegisterResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:send> (use wsdl2h option -g to auto-generate)

  - <ns1:sendResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:sentMessage> (use wsdl2h option -g to auto-generate)

  - <ns1:sentMessageResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:totalRegister> (use wsdl2h option -g to auto-generate)

  - <ns1:totalRegisterResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:validRegister> (use wsdl2h option -g to auto-generate)

  - <ns1:validRegisterResponse> (use wsdl2h option -g to auto-generate)

@section ns3 Top-level root elements of schema "http://jaxb.dev.java.net/array"

*/

/* End of mbatch_server.h */
