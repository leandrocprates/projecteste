//
// deflate.cpp
//
// $Id: //poco/1.3/Foundation/samples/deflate/src/deflate.cpp#1 $
//
// This sample demonstrates the DeflatingOutputStream and StreamCopier classes.
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/DeflatingStream.h"
#include "Poco/StreamCopier.h"
#include <iostream>
#include <fstream>


using Poco::DeflatingOutputStream;
using Poco::DeflatingStreamBuf;
using Poco::StreamCopier;

// Gera um arquivo teste_2.gz gravando os dados do arquivo teste_1.txt
// exemplo de como executar :
// comando: ./deflate teste_1.txt  teste_2.gz

int main(int argc, char** argv)
{
	if (argc != 3)
	{
		std::cout << "usage: " << argv[0] << ": <input_file> <output_file>" << std::endl
		          << "       read <input_file>, deflate (compress) it and write the result to <output_file>" << std::endl;
		return 1;
	}

        //abre arquivo de entrada dos dados
	std::ifstream istr(argv[1], std::ios::in);
	if (!istr)
	{
		std::cerr << "cannot open input file: " << argv[1] << std::endl;
		return 2;
	}

        //gera arquivo de saida dos dados
	std::ofstream ostr(argv[2], std::ios::out);
	if (!ostr)
	{
		std::cerr << "cannot open output file: " << argv[2] << std::endl;
		return 3;
	}

        // define que o arquivo gerado sera um .gz , descompactar com gunzip
	DeflatingOutputStream deflater(ostr, DeflatingStreamBuf::STREAM_GZIP);
        // copia todas as linhas do arquivo aberto para o novo arquivo gerado 
	StreamCopier::copyStream(istr, deflater);
	
	if (!ostr)
	{
		std::cerr << "error writing output file: " << argv[2] << std::endl;
		return 4;
	}

        deflater.close();
        istr.close();
	
	return 0;
}
